input {
  pipeline {
    address => "apps"
  }
}

filter {
  if [component] == "frontend" {

    # === MUTATE ===
    mutate {
    }
    
    # === GROK ===
    grok {
      match => { "message" => "%{IPORHOST:[client][address]} %{USER:[user][id]} %{USER:[user][name]} \[%{HTTPDATE:[@metadata][timestamp]}\] \"(?:%{WORD:[http][request][method]} %{NOTSPACE:[url][original]}(?: HTTP/%{NUMBER:[http][version]})?|%{DATA:rawrequest})\" %{NUMBER:[http][response][status_code]:int} (?:%{NUMBER:[http][response][body][bytes]:int}|-) %{QS:[http][request][referrer]} %{QS:[user_agent][original]}" }

      overwrite => [ "message" ]
    }

    if [http][response][status_code] {
      ruby {
        code => '
          status_code = event.get("[http][response][status_code]").to_i
          level = "info"
          if status_code >= 500
            level = "error"
          elsif status_code >= 400
            level = "warn"
          end
          event.set("[log][level]", level)
        '
      }
    }

    if [client][address] {
      geoip {
        source => "[client][address]"
        target => "[client][geo]"
      }
    }
  }
  
  if [component] == "backend" {
    # === MUTATE ===
    mutate {
    }

  }

  if [component] == "websocket" {
    # === MUTATE ===
    mutate {
    }
  }

    # === MUTATE ===
    mutate { add_tag => ["processed_by_apps_pipeline"] }

}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
    user => "logstash_internal"
    password => "${LOGSTASH_INTERNAL_PASSWORD}"
    data_stream => "true"
    data_stream_type => "logs"
    data_stream_dataset => "apps"
    action => "create"
  }
}